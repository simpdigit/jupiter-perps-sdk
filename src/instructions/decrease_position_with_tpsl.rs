//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use crate::generated::types::DecreasePositionWithTpslParams;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const DECREASE_POSITION_WITH_TPSL_DISCRIMINATOR: [u8; 8] = [108, 18, 203, 209, 227, 103, 65, 165];

/// Accounts.
#[derive(Debug)]
pub struct DecreasePositionWithTpsl {
      
              
          pub keeper: solana_pubkey::Pubkey,
          
              
          pub owner: solana_pubkey::Pubkey,
          
              
          pub transfer_authority: solana_pubkey::Pubkey,
          
              
          pub perpetuals: solana_pubkey::Pubkey,
          
              
          pub pool: solana_pubkey::Pubkey,
          
              
          pub position_request: solana_pubkey::Pubkey,
          
              
          pub position_request_ata: solana_pubkey::Pubkey,
          
              
          pub position: solana_pubkey::Pubkey,
          
              
          pub custody: solana_pubkey::Pubkey,
          
              
          pub custody_doves_price_account: solana_pubkey::Pubkey,
          
              
          pub collateral_custody: solana_pubkey::Pubkey,
          
              
          pub collateral_custody_doves_price_account: solana_pubkey::Pubkey,
          
              
          pub collateral_custody_token_account: solana_pubkey::Pubkey,
          
              
          pub token_program: solana_pubkey::Pubkey,
          
              
          pub event_authority: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl DecreasePositionWithTpsl {
  pub fn instruction(&self, args: DecreasePositionWithTpslInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: DecreasePositionWithTpslInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.keeper,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.owner,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.transfer_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.perpetuals,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.pool,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.position_request,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.position_request_ata,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.position,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.custody,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.custody_doves_price_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.collateral_custody,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.collateral_custody_doves_price_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.collateral_custody_token_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.token_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.event_authority,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&DecreasePositionWithTpslInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::PERPETUALS_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DecreasePositionWithTpslInstructionData {
            discriminator: [u8; 8],
            }

impl DecreasePositionWithTpslInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [108, 18, 203, 209, 227, 103, 65, 165],
                                }
  }
}

impl Default for DecreasePositionWithTpslInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct DecreasePositionWithTpslInstructionArgs {
                  pub params: DecreasePositionWithTpslParams,
      }


/// Instruction builder for `DecreasePositionWithTpsl`.
///
/// ### Accounts:
///
                ///   0. `[signer]` keeper
          ///   1. `[]` owner
          ///   2. `[]` transfer_authority
          ///   3. `[]` perpetuals
                ///   4. `[writable]` pool
                ///   5. `[writable]` position_request
                ///   6. `[writable]` position_request_ata
                ///   7. `[writable]` position
                ///   8. `[writable]` custody
          ///   9. `[]` custody_doves_price_account
                ///   10. `[writable]` collateral_custody
          ///   11. `[]` collateral_custody_doves_price_account
                ///   12. `[writable]` collateral_custody_token_account
          ///   13. `[]` token_program
          ///   14. `[]` event_authority
          ///   15. `[]` program
#[derive(Clone, Debug, Default)]
pub struct DecreasePositionWithTpslBuilder {
            keeper: Option<solana_pubkey::Pubkey>,
                owner: Option<solana_pubkey::Pubkey>,
                transfer_authority: Option<solana_pubkey::Pubkey>,
                perpetuals: Option<solana_pubkey::Pubkey>,
                pool: Option<solana_pubkey::Pubkey>,
                position_request: Option<solana_pubkey::Pubkey>,
                position_request_ata: Option<solana_pubkey::Pubkey>,
                position: Option<solana_pubkey::Pubkey>,
                custody: Option<solana_pubkey::Pubkey>,
                custody_doves_price_account: Option<solana_pubkey::Pubkey>,
                collateral_custody: Option<solana_pubkey::Pubkey>,
                collateral_custody_doves_price_account: Option<solana_pubkey::Pubkey>,
                collateral_custody_token_account: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                event_authority: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        params: Option<DecreasePositionWithTpslParams>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl DecreasePositionWithTpslBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn keeper(&mut self, keeper: solana_pubkey::Pubkey) -> &mut Self {
                        self.keeper = Some(keeper);
                    self
    }
            #[inline(always)]
    pub fn owner(&mut self, owner: solana_pubkey::Pubkey) -> &mut Self {
                        self.owner = Some(owner);
                    self
    }
            #[inline(always)]
    pub fn transfer_authority(&mut self, transfer_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.transfer_authority = Some(transfer_authority);
                    self
    }
            #[inline(always)]
    pub fn perpetuals(&mut self, perpetuals: solana_pubkey::Pubkey) -> &mut Self {
                        self.perpetuals = Some(perpetuals);
                    self
    }
            #[inline(always)]
    pub fn pool(&mut self, pool: solana_pubkey::Pubkey) -> &mut Self {
                        self.pool = Some(pool);
                    self
    }
            #[inline(always)]
    pub fn position_request(&mut self, position_request: solana_pubkey::Pubkey) -> &mut Self {
                        self.position_request = Some(position_request);
                    self
    }
            #[inline(always)]
    pub fn position_request_ata(&mut self, position_request_ata: solana_pubkey::Pubkey) -> &mut Self {
                        self.position_request_ata = Some(position_request_ata);
                    self
    }
            #[inline(always)]
    pub fn position(&mut self, position: solana_pubkey::Pubkey) -> &mut Self {
                        self.position = Some(position);
                    self
    }
            #[inline(always)]
    pub fn custody(&mut self, custody: solana_pubkey::Pubkey) -> &mut Self {
                        self.custody = Some(custody);
                    self
    }
            #[inline(always)]
    pub fn custody_doves_price_account(&mut self, custody_doves_price_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.custody_doves_price_account = Some(custody_doves_price_account);
                    self
    }
            #[inline(always)]
    pub fn collateral_custody(&mut self, collateral_custody: solana_pubkey::Pubkey) -> &mut Self {
                        self.collateral_custody = Some(collateral_custody);
                    self
    }
            #[inline(always)]
    pub fn collateral_custody_doves_price_account(&mut self, collateral_custody_doves_price_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.collateral_custody_doves_price_account = Some(collateral_custody_doves_price_account);
                    self
    }
            #[inline(always)]
    pub fn collateral_custody_token_account(&mut self, collateral_custody_token_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.collateral_custody_token_account = Some(collateral_custody_token_account);
                    self
    }
            #[inline(always)]
    pub fn token_program(&mut self, token_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.token_program = Some(token_program);
                    self
    }
            #[inline(always)]
    pub fn event_authority(&mut self, event_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.event_authority = Some(event_authority);
                    self
    }
            #[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn params(&mut self, params: DecreasePositionWithTpslParams) -> &mut Self {
        self.params = Some(params);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = DecreasePositionWithTpsl {
                              keeper: self.keeper.expect("keeper is not set"),
                                        owner: self.owner.expect("owner is not set"),
                                        transfer_authority: self.transfer_authority.expect("transfer_authority is not set"),
                                        perpetuals: self.perpetuals.expect("perpetuals is not set"),
                                        pool: self.pool.expect("pool is not set"),
                                        position_request: self.position_request.expect("position_request is not set"),
                                        position_request_ata: self.position_request_ata.expect("position_request_ata is not set"),
                                        position: self.position.expect("position is not set"),
                                        custody: self.custody.expect("custody is not set"),
                                        custody_doves_price_account: self.custody_doves_price_account.expect("custody_doves_price_account is not set"),
                                        collateral_custody: self.collateral_custody.expect("collateral_custody is not set"),
                                        collateral_custody_doves_price_account: self.collateral_custody_doves_price_account.expect("collateral_custody_doves_price_account is not set"),
                                        collateral_custody_token_account: self.collateral_custody_token_account.expect("collateral_custody_token_account is not set"),
                                        token_program: self.token_program.expect("token_program is not set"),
                                        event_authority: self.event_authority.expect("event_authority is not set"),
                                        program: self.program.expect("program is not set"),
                      };
          let args = DecreasePositionWithTpslInstructionArgs {
                                                              params: self.params.clone().expect("params is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `decrease_position_with_tpsl` CPI accounts.
  pub struct DecreasePositionWithTpslCpiAccounts<'a, 'b> {
          
                    
              pub keeper: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub owner: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub transfer_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub perpetuals: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub pool: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub position_request: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub position_request_ata: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub position: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub custody: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub collateral_custody: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub collateral_custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub collateral_custody_token_account: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub token_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub event_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `decrease_position_with_tpsl` CPI instruction.
pub struct DecreasePositionWithTpslCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub keeper: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub owner: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub transfer_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub perpetuals: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub pool: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub position_request: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub position_request_ata: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub position: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub custody: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub collateral_custody: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub collateral_custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub collateral_custody_token_account: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub token_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub event_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: DecreasePositionWithTpslInstructionArgs,
  }

impl<'a, 'b> DecreasePositionWithTpslCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: DecreasePositionWithTpslCpiAccounts<'a, 'b>,
              args: DecreasePositionWithTpslInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              keeper: accounts.keeper,
              owner: accounts.owner,
              transfer_authority: accounts.transfer_authority,
              perpetuals: accounts.perpetuals,
              pool: accounts.pool,
              position_request: accounts.position_request,
              position_request_ata: accounts.position_request_ata,
              position: accounts.position,
              custody: accounts.custody,
              custody_doves_price_account: accounts.custody_doves_price_account,
              collateral_custody: accounts.collateral_custody,
              collateral_custody_doves_price_account: accounts.collateral_custody_doves_price_account,
              collateral_custody_token_account: accounts.collateral_custody_token_account,
              token_program: accounts.token_program,
              event_authority: accounts.event_authority,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(16+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.keeper.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.owner.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.transfer_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.perpetuals.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.pool.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.position_request.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.position_request_ata.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.position.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.custody.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.custody_doves_price_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.collateral_custody.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.collateral_custody_doves_price_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.collateral_custody_token_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.token_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.event_authority.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&DecreasePositionWithTpslInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::PERPETUALS_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(17 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.keeper.clone());
                        account_infos.push(self.owner.clone());
                        account_infos.push(self.transfer_authority.clone());
                        account_infos.push(self.perpetuals.clone());
                        account_infos.push(self.pool.clone());
                        account_infos.push(self.position_request.clone());
                        account_infos.push(self.position_request_ata.clone());
                        account_infos.push(self.position.clone());
                        account_infos.push(self.custody.clone());
                        account_infos.push(self.custody_doves_price_account.clone());
                        account_infos.push(self.collateral_custody.clone());
                        account_infos.push(self.collateral_custody_doves_price_account.clone());
                        account_infos.push(self.collateral_custody_token_account.clone());
                        account_infos.push(self.token_program.clone());
                        account_infos.push(self.event_authority.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `DecreasePositionWithTpsl` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` keeper
          ///   1. `[]` owner
          ///   2. `[]` transfer_authority
          ///   3. `[]` perpetuals
                ///   4. `[writable]` pool
                ///   5. `[writable]` position_request
                ///   6. `[writable]` position_request_ata
                ///   7. `[writable]` position
                ///   8. `[writable]` custody
          ///   9. `[]` custody_doves_price_account
                ///   10. `[writable]` collateral_custody
          ///   11. `[]` collateral_custody_doves_price_account
                ///   12. `[writable]` collateral_custody_token_account
          ///   13. `[]` token_program
          ///   14. `[]` event_authority
          ///   15. `[]` program
#[derive(Clone, Debug)]
pub struct DecreasePositionWithTpslCpiBuilder<'a, 'b> {
  instruction: Box<DecreasePositionWithTpslCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> DecreasePositionWithTpslCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(DecreasePositionWithTpslCpiBuilderInstruction {
      __program: program,
              keeper: None,
              owner: None,
              transfer_authority: None,
              perpetuals: None,
              pool: None,
              position_request: None,
              position_request_ata: None,
              position: None,
              custody: None,
              custody_doves_price_account: None,
              collateral_custody: None,
              collateral_custody_doves_price_account: None,
              collateral_custody_token_account: None,
              token_program: None,
              event_authority: None,
              program: None,
                                            params: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn keeper(&mut self, keeper: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.keeper = Some(keeper);
                    self
    }
      #[inline(always)]
    pub fn owner(&mut self, owner: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.owner = Some(owner);
                    self
    }
      #[inline(always)]
    pub fn transfer_authority(&mut self, transfer_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.transfer_authority = Some(transfer_authority);
                    self
    }
      #[inline(always)]
    pub fn perpetuals(&mut self, perpetuals: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.perpetuals = Some(perpetuals);
                    self
    }
      #[inline(always)]
    pub fn pool(&mut self, pool: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.pool = Some(pool);
                    self
    }
      #[inline(always)]
    pub fn position_request(&mut self, position_request: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_request = Some(position_request);
                    self
    }
      #[inline(always)]
    pub fn position_request_ata(&mut self, position_request_ata: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position_request_ata = Some(position_request_ata);
                    self
    }
      #[inline(always)]
    pub fn position(&mut self, position: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.position = Some(position);
                    self
    }
      #[inline(always)]
    pub fn custody(&mut self, custody: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.custody = Some(custody);
                    self
    }
      #[inline(always)]
    pub fn custody_doves_price_account(&mut self, custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.custody_doves_price_account = Some(custody_doves_price_account);
                    self
    }
      #[inline(always)]
    pub fn collateral_custody(&mut self, collateral_custody: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collateral_custody = Some(collateral_custody);
                    self
    }
      #[inline(always)]
    pub fn collateral_custody_doves_price_account(&mut self, collateral_custody_doves_price_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collateral_custody_doves_price_account = Some(collateral_custody_doves_price_account);
                    self
    }
      #[inline(always)]
    pub fn collateral_custody_token_account(&mut self, collateral_custody_token_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.collateral_custody_token_account = Some(collateral_custody_token_account);
                    self
    }
      #[inline(always)]
    pub fn token_program(&mut self, token_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.token_program = Some(token_program);
                    self
    }
      #[inline(always)]
    pub fn event_authority(&mut self, event_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.event_authority = Some(event_authority);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn params(&mut self, params: DecreasePositionWithTpslParams) -> &mut Self {
        self.instruction.params = Some(params);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = DecreasePositionWithTpslInstructionArgs {
                                                              params: self.instruction.params.clone().expect("params is not set"),
                                    };
        let instruction = DecreasePositionWithTpslCpi {
        __program: self.instruction.__program,
                  
          keeper: self.instruction.keeper.expect("keeper is not set"),
                  
          owner: self.instruction.owner.expect("owner is not set"),
                  
          transfer_authority: self.instruction.transfer_authority.expect("transfer_authority is not set"),
                  
          perpetuals: self.instruction.perpetuals.expect("perpetuals is not set"),
                  
          pool: self.instruction.pool.expect("pool is not set"),
                  
          position_request: self.instruction.position_request.expect("position_request is not set"),
                  
          position_request_ata: self.instruction.position_request_ata.expect("position_request_ata is not set"),
                  
          position: self.instruction.position.expect("position is not set"),
                  
          custody: self.instruction.custody.expect("custody is not set"),
                  
          custody_doves_price_account: self.instruction.custody_doves_price_account.expect("custody_doves_price_account is not set"),
                  
          collateral_custody: self.instruction.collateral_custody.expect("collateral_custody is not set"),
                  
          collateral_custody_doves_price_account: self.instruction.collateral_custody_doves_price_account.expect("collateral_custody_doves_price_account is not set"),
                  
          collateral_custody_token_account: self.instruction.collateral_custody_token_account.expect("collateral_custody_token_account is not set"),
                  
          token_program: self.instruction.token_program.expect("token_program is not set"),
                  
          event_authority: self.instruction.event_authority.expect("event_authority is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct DecreasePositionWithTpslCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            keeper: Option<&'b solana_account_info::AccountInfo<'a>>,
                owner: Option<&'b solana_account_info::AccountInfo<'a>>,
                transfer_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                perpetuals: Option<&'b solana_account_info::AccountInfo<'a>>,
                pool: Option<&'b solana_account_info::AccountInfo<'a>>,
                position_request: Option<&'b solana_account_info::AccountInfo<'a>>,
                position_request_ata: Option<&'b solana_account_info::AccountInfo<'a>>,
                position: Option<&'b solana_account_info::AccountInfo<'a>>,
                custody: Option<&'b solana_account_info::AccountInfo<'a>>,
                custody_doves_price_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                collateral_custody: Option<&'b solana_account_info::AccountInfo<'a>>,
                collateral_custody_doves_price_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                collateral_custody_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                event_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        params: Option<DecreasePositionWithTpslParams>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

